service: users
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name



provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-south-1
  apiKeys:
      - user-register-apikey
  # memorySize: 128
  # timeout: 30 
  environment:
      DYNAMODB_TABLE_NAME: ${self:custom.dynamoTableName}
      JWT_SECRET: "!@!bloodyhell!@!"
  iam:
    role:
      statements:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:InvokeAsync
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:BatchGetItem
              - dynamodb:Scan
            # Resource: !GetAtt UsersTable.Arn
            Resource:
              - "Fn::GetAtt": [ UsersTable, Arn ]

custom:
  dynamodb:
    stages: 
      - dev
    start:
      port: 8000  
      migrate: true
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      convertEmptyValues: true
      seed: true
  serverless-offline:
    host: 0.0.0.0
    resourceRoutes: true
  dynamoTableName: users-table-${self:provider.stage}
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    # includeModules: false # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local


            

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
    individually: true
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
    health:
      handler: routes.health
      name: user-health
      memorySize: 128
      timeout: 5
      events:
        - http:
            cors: true
            path: health
            method: get
            private: true

    register:
      handler: routes.register
      name: user-register
      memorySize: 128
      timeout: 5
      events: 
        - http:
            cors: true
            path: register
            method: post

    login:
      handler: routes.login
      name: user-login
      memorySize: 128
      timeout: 5
      events: 
        - http:
            cors: true
            path: login
            method: post

    verify:
      handler: routes.verify
      name: user-verify
      memorySize: 128
      timeout: 5
      events: 
        - http:
            cors: true
            path: verify
            method: post

    resetPassword:
      handler: routes.resetPassword
      name: reset-password
      memorySize: 128
      timeout: 5
      events: 
        - http:
           cors: true
           path: reset-password
           method: post


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2


resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        # GlobalSecondaryIndexes:
        #   - IndexName: emailIndex
        #     KeySchema:
        #       - AttributeName: email
        #         KeyType: S
        #     Projection:
        #       ProjectionType: 'ALL'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"




